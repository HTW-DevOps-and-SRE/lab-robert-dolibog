This document will be updated in future iterations of the project.


Step one: creation of the basic webservice

I found the first step to be equal parts interesting and difficult. 
Even though I used a framework to make the webservice, I found it difficult to break into it.
After I have gotten used to the syntax and logic of Flask it has gotten better and more interesting.
Due to me not having enough time I couldnt properly figure out how to incorporate the json returns[get and post request] into the html textarea.
But im sure I will figure this out by the next labs deadline.

Step two: Dockerrization

In this exercise I started with rewriting the code to be more reader friendly and only use flask instead of flash and flask restful/API.
The next step was incorporting the messages from the flask app into the html file and returning those. I achieved this by returning a render_template with my html
to which I previously flashed the generated data.
After the code was cleaned I worked out the Dockerfile to make the image.
In conclusion I think this exercise was easier then the last one, but I still found it interesting and fun to figure out the docker syntax and make my app work externally.

Step three: Delivery Build
In this exercise I started with adding github secrets to serve as a secure source for my DockerHub login credentials. 
I then moved on to create the new workflows folder. Furthermore I added the .yml file for the workflow.
The correct syntax for the yml file was not that hard to find and I found it to be easily navigated. 
Thus the code is pretty simple and I added minimal documentation of the code, because most of the titles are self explainatory.
In conclusion I found the exercise pretty simple and it didn't take me that long to establish.
