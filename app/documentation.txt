This document will be updated in future iterations of the project.


Step one: creation of the basic webservice

I found the first step to be equal parts interesting and difficult. 
Even though I used a framework to make the webservice, I found it difficult to break into it.
After I have gotten used to the syntax and logic of Flask it has gotten better and more interesting.
Due to me not having enough time I couldnt properly figure out how to incorporate the json returns[get and post request] into the html textarea.
But im sure I will figure this out by the next labs deadline.

Step two: Dockerrization

In this exercise I started with rewriting the code to be more reader friendly and only use flask instead of flash and flask restful/API.
The next step was incorporting the messages from the flask app into the html file and returning those. I achieved this by returning a render_template with my html
to which I previously flashed the generated data.
After the code was cleaned I worked out the Dockerfile to make the image.
In conclusion I think this exercise was easier then the last one, but I still found it interesting and fun to figure out the docker syntax and make my app work externally.

Step three: Delivery Build

In this exercise I started with adding github secrets to serve as a secure source for my DockerHub login credentials. 
I then moved on to create the new workflows folder. Furthermore I added the .yml file for the workflow.
The correct syntax for the yml file was not that hard to find and I found it to be easily navigated. 
Thus the code is pretty simple and I added minimal documentation of the code, because most of the titles are self explainatory.
In conclusion I found the exercise pretty simple and it didn't take me that long to establish.


Step four: docker-compose:
At first I want to exuse the late delivery of the assignment. I wanted to work on this assignment on Sunday of last week(10.12.23) 
Unfortunately I developed a bronchitis and was bed bound. I used the week to get better, and I finally felt healty enough to complete the task today. 
Now to come to the actual exercise. I first started with writing the docker-compose file. The file was quickly written, though I forgot to assign the ports. 
Thus the webservice wouldnt start properly. The issue was found swiftly as I mentioned it in the lab. After that problem was finished I went on to refactor the html file
to include java script logic for handling post and get requests. I mainly used the logic presented in the example file from the project of stephan lindner, as this was made
an option in a previous exercise. This was done to make my code more structured and easier to read. Now to go on to the app.py file. I decided to use postgresql as my database,
so I had to use some kind of handler which could write onto it. I decided to use sqlalchemy for this. Furthermore I added a timstamp class that would incorporate the data from the 
websercie to the database. I then later wrote onto it and read from it the the coresponding POST and GET requests. 
I found this exercise to be more difficult then the previous ones, but It was still interesting and I learned alot from it. 


Step five_ Kubernetes:
07:
To start I want to clarify that assignments 07 and 08 will be talked about in this part of my documentation as both adress the same topic. For the assignment 07 I wrote a small
essay to go over the defined hosting options. I found this part to be pretty easy and fairly straight forward. I still gained a good overview of Kubernetes through this assigment,
and my resulting research. The file can be found in the parent directory of my repository. To now come to the installation of minikube. For this part I followed the guidelines in 
the minikube documentation and the kubctl documentation from the kubernetes website. I used shell commands to install both and appended a path variable for both, as Im using Windows.
In conclusion I found this exersice to be relatively interesting and something different from the usual. 

08:
To now go to the kubernetes deployment. As suggested I started with writing the nessessary yaml files in the subdirectory. To be more specific, I started ith writing the database files.
I decided to split them up into a statefulset and a service file. At first I had both combined into one file, but considering clean and understandable coding procedure, I decided to split them up.
The service file is very simple and only specifies the DB port. The statefulset was more complex than that. It defines the whole database as a statefulset. This assures that the data will be permanent
and can be acessed when the service goes down. Further the file inhabits all the nessessary connection data, as well as claims and mounts the storage partition. Further a password secret is referenced
for the DB access. This secret is initialized in a seperate file containing the password as a base64 encoded string, as this syntax is required, and makes it more secure. 
The next step I took was to change the app.py file to be able to write/read to the newly added database pod. Furthermore I added a migration to the app in case the database shema /model needs to be changed in the future.
As for the last step I added two yaml files for the web-service site of the application. In those I defined the replica count needed and connected it to the database, as well as put a load LoadBalancer into place. 
In conclusion I found this exercise to be the most difficult so far, as it really challenged me to look into kubernetes in detail and figure out a way to make my postgres database work. This was an important aspect as I 
wanted to implement this specific DB. 


Step six :



